name: Build and Test C Shell

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up environment
        run: sudo apt-get update && sudo apt-get install -y build-essential

      - name: Fix compilation issues
        run: |
          # Create a patch file to fix the issues
          cat > fix.patch << 'EOF'
          --- a/src/main.c
          +++ b/src/main.c
          @@ -1,9 +1,11 @@
           #include <stdio.h>
           #include <stdlib.h>
           #include <string.h>
          +#define _POSIX_C_SOURCE 200809L
           #include <unistd.h>
           #include <fcntl.h>
           #include <ctype.h>
          +#include <linux/limits.h> /* For PATH_MAX */
           #include <sys/wait.h>
           #include <sys/stat.h>
           #include <termios.h>
          EOF
          
          # Apply the patch
          patch src/main.c fix.patch || echo "Patch didn't apply cleanly, making direct edits"
          
          # If patch fails, make direct edits
          if [ $? -ne 0 ]; then
            # Add _POSIX_C_SOURCE definition at the top of the file
            sed -i '1s/^/#define _POSIX_C_SOURCE 200809L\n/' src/main.c
            # Add PATH_MAX definition if not present
            if ! grep -q "PATH_MAX" src/main.c; then
              sed -i '/#include <termios.h>/a #include <linux/limits.h> /* For PATH_MAX */' src/main.c
            fi
          fi
          
      - name: Compile directly (Linux)
        run: |
          mkdir -p bin
          gcc -Wall -Wextra -pedantic -std=c11 -D_POSIX_C_SOURCE=200809L -O2 -DNDEBUG src/main.c -o bin/shell
          if [ -f "bin/shell" ]; then 
            echo "✅ Direct compilation successful"
          else
            echo "❌ Direct compilation failed" 
            exit 1
          fi

      - name: Create test environment
        run: mkdir -p test_dir && echo "test content" > test_dir/test_file.txt && chmod +x test_dir/test_file.txt
      
      - name: Create test script
        run: |
          printf 'echo "Testing echo command"\npwd\ncd test_dir\npwd\necho "Reading test file: test_file.txt"\nexit\n' > test_commands.txt
      
      - name: Test basic functionality
        run: |
          OUTPUT=$(cat test_commands.txt | ./bin/shell 2>&1 || true)
          echo "$OUTPUT"
          if echo "$OUTPUT" | grep -q "Testing echo command"; then echo "✅ Echo command test passed"; else echo "❌ Echo command test failed" && exit 1; fi
          if echo "$OUTPUT" | grep -q "$(pwd)" || echo "$OUTPUT" | grep -q "/"; then echo "✅ PWD command test passed"; else echo "❌ PWD command test failed"; fi
          if [ -n "$OUTPUT" ]; then echo "✅ Shell executed successfully"; else echo "❌ Shell failed to run" && exit 1; fi

  build-multi-platform:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        cc: [gcc, clang]
        include:
          - os: macos-latest
            cc: clang

    steps:
      - uses: actions/checkout@v3

      - name: Set up environment
        run: if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then sudo apt-get update && sudo apt-get install -y build-essential; fi

      - name: Fix compilation issues
        run: |
          if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            # Linux-specific fixes
            sed -i '1s/^/#define _POSIX_C_SOURCE 200809L\n/' src/main.c
            sed -i '/#include <termios.h>/a #include <linux/limits.h> /* For PATH_MAX */' src/main.c
          else
            # macOS-specific fixes
            sed -i '' '1s/^/#define _POSIX_C_SOURCE 200809L\n/' src/main.c
            sed -i '' '/#include <termios.h>/a\\
            #include <sys/syslimits.h> /* For PATH_MAX */' src/main.c
          fi
          
      - name: Compile directly with ${{ matrix.cc }}
        run: |
          mkdir -p bin
          if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            ${{ matrix.cc }} -Wall -Wextra -pedantic -std=c11 -D_POSIX_C_SOURCE=200809L -O2 -DNDEBUG src/main.c -o bin/shell
          else
            ${{ matrix.cc }} -Wall -Wextra -pedantic -std=c11 -O2 -DNDEBUG src/main.c -o bin/shell
          fi
          if [ -f "bin/shell" ]; then 
            echo "✅ Direct compilation successful with ${{ matrix.cc }} on ${{ matrix.os }}"
          else
            echo "❌ Direct compilation failed with ${{ matrix.cc }} on ${{ matrix.os }}"
            exit 1
          fi

  code-quality:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Install analysis tools
        run: sudo apt-get update && sudo apt-get install -y cppcheck

      - name: Static analysis with cppcheck
        run: |
          if find src -name "*.c" 1> /dev/null 2>&1; then cppcheck --enable=warning,performance --suppress=missingIncludeSystem --error-exitcode=0 src/*.c && echo "ℹ️ Cppcheck analysis completed"; else echo "ℹ️ No .c files found to analyze"; fi
        
      - name: Check coding standards
        run: |
          if find src -name "*.c" -o -name "*.h" 2>/dev/null 1>&2; then
            LONG_LINES=$(grep -n '.\{81\}' src/*.c src/*.h 2>/dev/null || echo "")
            if [ -n "$LONG_LINES" ]; then echo "ℹ️ Found lines longer than 80 characters:" && echo "$LONG_LINES" | head -10 && echo "Consider reformatting these lines."; else echo "✅ No lines over 80 characters found."; fi
            TABS=$(grep -P '\t' src/*.c src/*.h 2>/dev/null || echo "")
            if [ -n "$TABS" ]; then echo "ℹ️ Found tabs in source files. Consider using spaces instead."; else echo "✅ No tabs found in source files."; fi
          else
            echo "ℹ️ No .c or .h files found to check coding standards"
          fi